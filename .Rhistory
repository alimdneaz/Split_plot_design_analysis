p1 <- ggplot(data.frame(Fitted = fitted_values, Residuals = residuals_values), aes(x = Fitted, y = Residuals)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(title = "Residuals vs Fitted", x = "Fitted Values", y = "Residuals") +
theme_minimal()
p2 <- ggplot(data.frame(StdResiduals = std_residuals), aes(sample = StdResiduals)) +
stat_qq() +
stat_qq_line(color = "red") +
labs(title = "Normal Q-Q Plot (Standardized Residuals)") +
theme_minimal()
std_residuals <- residuals_model/residual_sd
fitted_values <- fitted(model)
residual_sd <- sd(residuals_model)
std_residuals <- residuals_model/residual_sd
fitted_values <- fitted(model)
residual_sd <- sd(residuals_model)
std_residuals <- residuals_model/residual_sd
# Create individual plots
p1 <- ggplot(data.frame(Fitted = fitted_values, Residuals = residuals_values), aes(x = Fitted, y = Residuals)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(title = "Residuals vs Fitted", x = "Fitted Values", y = "Residuals") +
theme_minimal()
p2 <- ggplot(data.frame(StdResiduals = std_residuals), aes(sample = StdResiduals)) +
stat_qq() +
stat_qq_line(color = "red") +
labs(title = "Normal Q-Q Plot (Standardized Residuals)") +
theme_minimal()
p3 <- ggplot(data.frame(Fitted = fitted_values, StdResiduals = std_residuals), aes(x = Fitted, y = StdResiduals)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(title = "Scale-Location", x = "Fitted Values", y = "Standardized Residuals") +
theme_minimal()
p4 <- ggplot(data.frame(Index = seq_along(cooks_distance), CooksDistance = cooks_distance), aes(x = Index, y = CooksDistance)) +
geom_bar(stat = "identity", fill = "steelblue", alpha = 0.7) +
geom_hline(yintercept = 4 / length(cooks_distance), color = "red", linetype = "dashed") +
labs(title = "Cook's Distance", x = "Index", y = "Cook's Distance") +
theme_minimal()
# Combine all plots into a grid
grid.arrange(p1, p2, p3, p4, ncol = 2)
library(gridExtra)
library(gridExtra)
fitted_values <- fitted(model)
residual_sd <- sd(residuals_model)
std_residuals <- residuals_model/residual_sd
# Create individual plots
p1 <- ggplot(data.frame(Fitted = fitted_values, Residuals = residuals_values), aes(x = Fitted, y = Residuals)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(title = "Residuals vs Fitted", x = "Fitted Values", y = "Residuals") +
theme_minimal()
p2 <- ggplot(data.frame(StdResiduals = std_residuals), aes(sample = StdResiduals)) +
stat_qq() +
stat_qq_line(color = "red") +
labs(title = "Normal Q-Q Plot (Standardized Residuals)") +
theme_minimal()
p3 <- ggplot(data.frame(Fitted = fitted_values, StdResiduals = std_residuals), aes(x = Fitted, y = StdResiduals)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(title = "Scale-Location", x = "Fitted Values", y = "Standardized Residuals") +
theme_minimal()
p4 <- ggplot(data.frame(Index = seq_along(cooks_distance), CooksDistance = cooks_distance), aes(x = Index, y = CooksDistance)) +
geom_bar(stat = "identity", fill = "steelblue", alpha = 0.7) +
geom_hline(yintercept = 4 / length(cooks_distance), color = "red", linetype = "dashed") +
labs(title = "Cook's Distance", x = "Index", y = "Cook's Distance") +
theme_minimal()
# Combine all plots into a grid
grid.arrange(p1, p2, p3, p4, ncol = 2)
library(gridExtra)
fitted_values <- fitted(model)
residual_sd <- sd(residuals_model)
std_residuals <- residuals_model/residual_sd
# Create individual plots
p1 <- ggplot(data.frame(Fitted = fitted_values, Residuals = residuals_values), aes(x = Fitted, y = Residuals)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(title = "Residuals vs Fitted", x = "Fitted Values", y = "Residuals") +
theme_minimal()
p2 <- ggplot(data.frame(Fitted = fitted_values, StdResiduals = std_residuals), aes(x = Fitted, y = StdResiduals)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(title = "Scale-Location (Standardized Residuals vs Fitted)", x = "Fitted Values", y = "Standardized Residuals") +
theme_minimal()
p3 <- ggplot(data.frame(Fitted = fitted_values, StdResiduals = std_residuals), aes(x = Fitted, y = StdResiduals)) +
geom_point(color = "blue", alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
labs(title = "Scale-Location", x = "Fitted Values", y = "Standardized Residuals") +
theme_minimal()
p4 <- ggplot(data.frame(Index = seq_along(cooks_distance), CooksDistance = cooks_distance), aes(x = Index, y = CooksDistance)) +
geom_bar(stat = "identity", fill = "steelblue", alpha = 0.7) +
geom_hline(yintercept = 4 / length(cooks_distance), color = "red", linetype = "dashed") +
labs(title = "Cook's Distance", x = "Index", y = "Cook's Distance") +
theme_minimal()
# Combine all plots into a grid
grid.arrange(p1, p2, p3, p4, ncol = 2)
rstandard(model)
ggplot(df, aes(x = Tillage, y = Yield, fill = Tillage)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 3) +  # Add boxplot with styled outliers
stat_summary(fun = mean, geom = "point", shape = 4, size = 4, color = "black", stroke = 1.5) +  # Add mean as points
scale_fill_manual(values = c("skyblue", "lightgreen")) +  # Customize fill colors
labs(
title = "Effect of Tillage on Crop Yield",
subtitle = "Comparing Conventional vs. Conservation Tillage",
x = "Tillage Type",
y = "Yield (Units)",
fill = "Tillage"
) +
theme_minimal(base_size = 14) +  # Use minimal theme with larger base font size
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),  # Center and bold the title
plot.subtitle = element_text(size = 12, hjust = 0.5),  # Center the subtitle
axis.text = element_text(color = "black"),  # Black axis labels
legend.position = "top",  # Place legend at the top
legend.title = element_text(face = "bold")  # Bold legend title
) +
coord_flip()  # Flip coordinates for horizontal boxplots (optional)
ggplot(df, aes(x = Tillage, y = Yield, fill = Manure)) +
geom_boxplot() +
labs(title = "Boxplot of Yield by Tillage and Manure", x = "Tillage", y = "Yield") +
scale_fill_manual(values = c("lightblue", "lightgreen", "lightpink")) +
theme_minimal() +
theme(legend.title = element_text(size = 12), legend.position = "top")
ggplot(df, aes(x = Tillage, y = Yield, fill = Organic_Manure)) +
geom_boxplot() +
labs(title = "Boxplot of Yield by Tillage and Manure", x = "Tillage", y = "Yield") +
scale_fill_manual(values = c("lightblue", "lightgreen", "lightpink")) +
theme_minimal() +
theme(legend.title = element_text(size = 12), legend.position = "top")
ggplot(df, aes(x = Tillage, y = Yield, fill = Manure)) +
geom_boxplot() +
facet_wrap(~ Rep, scales = "free_y") +  # Separate boxplots for each Replication
labs(title = "Boxplot of Yield by Tillage, Manure, and Replication", x = "Tillage", y = "Yield") +
scale_fill_manual(values = c("lightblue", "lightgreen", "lightpink")) +
theme_minimal() +
theme(legend.position = "top")
ggplot(df, aes(x = Tillage, y = Yield, fill = Organic_Manure)) +
geom_boxplot() +
facet_wrap(~ Rep, scales = "free_y") +  # Separate boxplots for each Replication
labs(title = "Boxplot of Yield by Tillage, Manure, and Replication", x = "Tillage", y = "Yield") +
scale_fill_manual(values = c("lightblue", "lightgreen", "lightpink")) +
theme_minimal() +
theme(legend.position = "top")
# Check the unique levels of Organic_Manure
unique_manure_levels <- levels(df$Organic_Manure)
# Define the number of colors needed based on the levels
n_levels <- length(unique_manure_levels)
color_palette <- c("lightblue", "lightgreen", "lightpink", "lightyellow")  # Adjust colors if needed
# Generate the plot with adjusted color palette
ggplot(df, aes(x = Tillage, y = Yield, fill = Organic_Manure)) +
geom_boxplot() +
facet_wrap(~ Rep, scales = "free_y") +  # Separate boxplots for each Replication
labs(title = "Boxplot of Yield by Tillage, Manure, and Replication", x = "Tillage", y = "Yield") +
scale_fill_manual(values = color_palette[1:n_levels]) +  # Use the correct number of colors
theme_minimal() +
theme(legend.position = "top")
boxplot(Yield ~ Tillage)
boxplot(Yield ~ Tillage, data = df)
ggplot(df, aes(x = Tillage, y = Yield, fill = Tillage)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2, outlier.colour = "red") +  # Customize outliers
scale_fill_brewer(palette = "Set3") +  # Use a color palette for the box fill
labs(title = "Boxplot of Yield by Tillage",
x = "Tillage",
y = "Yield") +
theme_minimal() +  # Clean minimal theme
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Center and bold title
axis.title = element_text(size = 14),  # Axis title size
axis.text = element_text(size = 12),  # Axis text size
legend.position = "none"  # Remove legend
)
boxplot(Yield ~ Organic_Manure, data = df)
# Aesthetic Boxplot of Yield by Organic_Manure
ggplot(df, aes(x = Organic_Manure, y = Yield, fill = Organic_Manure)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2, outlier.colour = "red") +  # Customize outliers
scale_fill_brewer(palette = "Pastel1") +  # Use a light, pastel color palette
labs(title = "Boxplot of Yield by Organic Manure",
x = "Organic Manure",
y = "Yield") +
theme_minimal() +  # Clean minimal theme
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Center and bold title
axis.title = element_text(size = 14),  # Axis title size
axis.text = element_text(size = 12),  # Axis text size
legend.position = "none"  # Remove legend
)
boxplot(Yield ~ Tillage + Organic_Manure, data = df)
# Aesthetic Boxplot of Yield by Tillage and Organic Manure
ggplot(df, aes(x = interaction(Tillage, Organic_Manure), y = Yield, fill = interaction(Tillage, Organic_Manure))) +
geom_boxplot(outlier.shape = 16, outlier.size = 2, outlier.colour = "red") +  # Customize outliers
scale_fill_brewer(palette = "Set3") +  # Use a color palette for the interaction levels
labs(title = "Boxplot of Yield by Tillage and Organic Manure",
x = "Tillage and Organic Manure",
y = "Yield") +
theme_minimal() +  # Clean minimal theme
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Center and bold title
axis.title = element_text(size = 14),  # Axis title size
axis.text = element_text(size = 12),  # Axis text size
legend.position = "none"  # Remove legend
)
boxplot(Yield ~ Rep, data = df)
# Aesthetic Boxplot of Yield by Replication (Rep)
ggplot(df, aes(x = Rep, y = Yield, fill = Rep)) +
geom_boxplot(outlier.shape = 16, outlier.size = 2, outlier.colour = "red") +  # Customize outliers
scale_fill_brewer(palette = "Set1") +  # Use a color palette for Replication groups
labs(title = "Boxplot of Yield by Replication",
x = "Replication",
y = "Yield") +
theme_minimal() +  # Clean minimal theme
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Center and bold title
axis.title = element_text(size = 14),  # Axis title size
axis.text = element_text(size = 12),  # Axis text size
legend.position = "none"  # Remove legend
)
boxplot(Yield ~ Rep + Tillage, data = df)
# Aesthetic Boxplot of Yield by Rep and Tillage
ggplot(df, aes(x = interaction(Rep, Tillage), y = Yield, fill = interaction(Rep, Tillage))) +
geom_boxplot(outlier.shape = 16, outlier.size = 2, outlier.colour = "red") +  # Customize outliers
scale_fill_brewer(palette = "Set3") +  # Use a color palette for the interaction levels
labs(title = "Boxplot of Yield by Replication and Tillage",
x = "Replication and Tillage",
y = "Yield") +
theme_minimal() +  # Clean minimal theme
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Center and bold title
axis.title = element_text(size = 14),  # Axis title size
axis.text = element_text(size = 12),  # Axis text size
legend.position = "none"  # Remove legend
)
boxplot(Yield ~ Rep + Organic_Manure, data = df)
# Aesthetic Boxplot of Yield by Rep and Organic Manure
ggplot(df, aes(x = interaction(Rep, Organic_Manure), y = Yield, fill = interaction(Rep, Organic_Manure))) +
geom_boxplot(outlier.shape = 16, outlier.size = 2, outlier.colour = "red") +  # Customize outliers
scale_fill_brewer(palette = "Set3") +  # Use a color palette for the interaction levels
labs(title = "Boxplot of Yield by Replication and Organic Manure",
x = "Replication and Organic Manure",
y = "Yield") +
theme_minimal() +  # Clean minimal theme
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Center and bold title
axis.title = element_text(size = 14),  # Axis title size
axis.text = element_text(size = 12),  # Axis text size
legend.position = "none"  # Remove legend
)
ggplot(df, aes(x = Yield)) +
geom_histogram(aes(y = ..density..),
bins = 30,
fill = "lightblue",
color = "black",
alpha = 0.7) +  # Adjust histogram transparency
geom_density(color = "red", size = 1.2) +  # Overlay density curve
labs(title = "Histogram with Density Curve for Yield",
x = "Yield",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5))  # Title customization
ggplot(df, aes(x = Yield)) +
geom_histogram(aes(y = ..density..),
bins = 30,
fill = "green",
color = "black",
alpha = 0.7) +  # Adjust histogram transparency
geom_density(color = "yellow", size = 1.2) +  # Overlay density curve
labs(title = "Histogram with Density Curve for Yield",
x = "Yield",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5))  # Title customization
ggplot(df, aes(x = Yield)) +
geom_histogram(aes(y = ..density..),
bins = 30,
fill = "green",
color = "black",
alpha = 0.7) +  # Adjust histogram transparency
geom_density(color = "black", size = 1.2) +  # Overlay density curve
labs(title = "Histogram with Density Curve for Yield",
x = "Yield",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5))  # Title customization
ggplot(df, aes(x = Yield, fill = Tillage)) +
geom_histogram(aes(y = ..density..),
bins = 30,
color = "black",
alpha = 0.6) +
geom_density(aes(color = Tillage), size = 1.2) +  # Separate density curves by Tillage
labs(title = "Histogram with Density Curve by Tillage",
x = "Yield",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5))
ggplot(df, aes(x = Yield, fill = Organic_Manure)) +
geom_histogram(aes(y = ..density..),
bins = 30,
color = "black",
alpha = 0.6) +
geom_density(aes(color = Organic_Manure), size = 1.2) +  # Separate density curves by Organic Manure
labs(title = "Histogram with Density Curve by Organic Manure",
x = "Yield",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5))
ggplot(df, aes(x = Yield, fill = Rep)) +
geom_histogram(aes(y = ..density..),
bins = 30,
color = "black",
alpha = 0.6) +
geom_density(aes(color = Rep), size = 1.2) +  # Separate density curves by Replication
labs(title = "Histogram with Density Curve by Replication",
x = "Yield",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5))
ggplot(df, aes(x = Yield, fill = Tillage)) +
geom_histogram(aes(y = ..density..),
bins = 30,
color = "black",
alpha = 0.6) +
geom_density(aes(color = Tillage), size = 1.2) +  # Separate density curves by Tillage
facet_wrap(~ Organic_Manure) +  # Facet by Organic Manure
labs(title = "Histogram with Density Curve by Tillage and Organic Manure",
x = "Yield",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5))
ggplot(df, aes(x = Tillage, y = Yield, fill = Organic_Manure)) +
geom_boxplot() +
labs(title = "Boxplot of Yield by Tillage and Manure", x = "Tillage", y = "Yield") +
scale_fill_manual(values = c("lightblue", "lightgreen", "lightpink")) +
theme_minimal() +
theme(legend.title = element_text(size = 12), legend.position = "top")
# Calculate the standardized residuals and the fitted values
std_residuals <- rstandard(model)
library(agricolae)
df <- read.csv("./split_plot.csv", header = T)
df$Rep <- as.factor(df$Rep)
df$Tillage <- as.factor(df$Tillage)
df$Organic_Manure <- as.factor(df$Organic_Manure)
split_plot <- with(df,design.split(
trt1 = Tillage,
trt2 = Organic_Manure,
r = Rep,
response = Yield
))
split_plot <- with(df,design.split(
trt1 = Tillage,
trt2 = Organic_Manure,
r = Rep,
response  = Yield
))
split_plot <- with(df,design.split(
trt1 = Tillage,
trt2 = Organic_Manure,
r = Rep,
response  = Yield
))
split_plot <- with(df,design.split(
trt1 = df$Tillage,
trt2 = df$Tillage,
r = df$Rep,
response  = df$Yield
))
split_plot <- with(df,design.split(
trt1 = df$Tillage,
trt2 = df$Tillage,
r = df$Rep
))
split_plot$ANOVA
library(lmerTest)
# Fit the model
model <- lmer(Yield ~ Tillage * Manure + (1 | Rep) + (1 | Rep:Tillage), data = df)
# Fit the model
model <- lmer(Yield ~ Tillage * Organic_Manure + (1 | Rep) + (1 | Rep:Tillage), data = df)
model <- lmer(Yield ~ Tillage * Organic_Manure + (1 | Rep) + (1 | Rep:Tillage), data = df)
model <- lm(df$Yield ~ df$Tillage + Error(df$Tillage)+ df$Organic_Manure + df$Tillage:df$Organic_Manure)
model <- aov(Yield ~ Tillage * Organic_Manure + Error(Rep/Tillage), data = df)
summary(model)
knitr::opts_chunk$set(echo = TRUE)
residuals_data <- residuals(model2)
library(lme4)
library(lmerTest)
library(emmeans)
library(ggplot2)
library(agricolae)
library(dplyr)
# Data Import
df <- read.csv("./split_plot.csv", header = T)
head(df)
cat("Dimension of the dataframe",dim(df))
cat("Str: ", str(df))
table(df$Tillage)
model2 <- aov(Yield~Tillage+Organic_Manure+Rep, data = df)
duncan_result <- duncan.test(model2, "Organic_Manure", group = TRUE)
# Print the results
print(duncan_result)
residuals_data <- residuals(model2)
# Create a data frame for ggplot
residuals_df <- data.frame(residuals = residuals_data)
# Plotting the boxplot using ggplot
ggplot(residuals_df, aes(x = 1, y = residuals)) +
geom_boxplot(fill = "lightblue", color = "darkblue", outlier.colour = "red", outlier.size = 3) +
labs(title = "Boxplot of Residuals", x = "Residuals", y = "Value") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Hide x-axis label (since we have only one category)
axis.ticks.x = element_blank())  # Hide x-axis ticks
residuals_data <- residuals(model2)
# Create a data frame for ggplot
residuals_df <- data.frame(residuals = residuals_data)
# Plotting the boxplot using ggplot
ggplot(residuals_df, aes(x = 1, y = residuals)) +
geom_boxplot(fill = "green", color = "black", outlier.colour = "red", outlier.size = 3) +
labs(title = "Boxplot of Residuals", x = "Residuals", y = "Value") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Hide x-axis label (since we have only one category)
axis.ticks.x = element_blank())  # Hide x-axis ticks
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(lmerTest)
library(emmeans)
library(ggplot2)
library(agricolae)
library(dplyr)
# Data Import
df <- read.csv("./split_plot.csv", header = T)
head(df)
cat("Dimension of the dataframe",dim(df))
cat("Str: ", str(df))
cat("Dimension of the dataframe",dim(df))
cat("Str: ", str(df))
cat("Dimension of the dataframe",dim(df))
cat("Str: ", str(df))
df$Rep <- as.factor(df$Rep)
df$Tillage <- as.factor(df$Tillage)
df$Organic_Manure <- as.factor(df$Organic_Manure)
table(df$Rep)
table(df$Tillage)
table(df$Organic_Manure)
df_summary <- df %>%
group_by(Tillage) %>%
summarise(
Mean = mean(Yield, na.rm = TRUE),
SD = sd(Yield, na.rm = TRUE),
MAX = max(Yield, na.rm = TRUE),
Min = min(Yield, na.rm = TRUE)
)
# Print the summary
print(df_summary)
# Create the aesthetic bar plot with error bars
ggplot(df_summary, aes(x = Tillage, y = Mean, fill = Tillage)) +
geom_bar(stat = "identity", position = "dodge", show.legend = FALSE) +  # Create bars
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = 0.2) +  # Add error bars
labs(
title = "Group Means with Standard Deviation",
x = "Group",
y = "Mean Yield",
caption = "Error bars represent standard deviation"
) +
theme_minimal() +  # Use minimal theme
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for clarity
text = element_text(size = 14)  # Increase text size for better readability
)
model <- aov(Yield ~ Tillage * Organic_Manure + Error(Rep/Tillage), data = df)
summary(model)
model2 <- aov(Yield~Tillage+Organic_Manure+Rep, data = df)
duncan_result <- duncan.test(model2, "Organic_Manure", group = TRUE)
# Print the results
print(duncan_result)
# model2 <- aov(Yield~Tillage+Organic_Manure+Rep, data = df)
lsd_result <- LSD.test(model2, "Organic_Manure", group = TRUE)
# Print the results
print(lsd_result)
hsd_result <- HSD.test(model2, "Tillage", group = TRUE)
# Print the results
print(hsd_result)
hsd_result <- HSD.test(model2, "Tillage*Organic_Manure", group = TRUE)
# Print the results
print(hsd_result)
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(lmerTest)
library(emmeans)
library(ggplot2)
library(agricolae)
library(dplyr)
# Data Import
df <- read.csv("./split_plot.csv", header = T)
head(df)
cat("Dimension of the dataframe",dim(df))
cat("Str: ", str(df))
cat("Dimension of the dataframe",dim(df))
cat("Str: ", str(df))
cat("Dimension of the dataframe",dim(df))
cat("Str: ", str(df))
df$Rep <- as.factor(df$Rep)
df$Tillage <- as.factor(df$Tillage)
df$Organic_Manure <- as.factor(df$Organic_Manure)
table(df$Rep)
model <- aov(Yield ~ Tillage * Organic_Manure + Error(Rep/Tillage), data = df)
summary(model)
model2 <- aov(Yield~Tillage+Organic_Manure+Rep, data = df)
duncan_result <- duncan.test(model2, "Organic_Manure", group = TRUE)
# Print the results
print(duncan_result)
# model2 <- aov(Yield~Tillage+Organic_Manure+Rep, data = df)
lsd_result <- LSD.test(model2, "Organic_Manure", group = TRUE)
# Print the results
print(lsd_result)
hsd_result <- HSD.test(model2, "Organic_Manure", group = TRUE)
# Print the results
print(hsd_result)
